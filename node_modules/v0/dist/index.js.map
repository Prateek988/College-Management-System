{"version":3,"sources":["../src/index.ts","../src/commands/add.ts","../src/utils/get-config.ts","../src/utils/resolve-import.ts","../src/utils/get-package-manager.ts","../src/utils/logger.ts","../src/utils/handle-error.ts","../src/utils/registry/index.ts","../src/utils/registry/schema.ts","../src/utils/registry/external.ts","../src/utils/transformers/index.ts","../src/utils/transformers/transform-css-vars.ts","../src/utils/transformers/transform-import.ts","../src/utils/transformers/transform-jsx.ts","../src/utils/transformers/transform-rsc.ts","../src/utils/format-code.ts","../src/utils/preflight.ts","../src/utils/errors.ts","../src/utils/npm-commands.ts","../src/utils/get-project-info.ts","../src/utils/templates.ts","../src/utils/transformers/transform-tailwind-config.ts","../src/commands/init.ts","../src/commands/create.ts","../src/utils/create-project.ts"],"sourcesContent":["#!/usr/bin/env node\nimport { Command } from 'commander'\nimport { add } from '@/src/commands/add'\n\nimport { init } from '@/src/commands/init'\nimport { create } from '@/src/commands/create'\n\nprocess.on('SIGINT', () => process.exit(0))\nprocess.on('SIGTERM', () => process.exit(0))\n\nasync function main() {\n  const program = new Command()\n    .name('v0')\n    .description('add components and dependencies to your project')\n\n  program.addCommand(init).addCommand(add).addCommand(create)\n\n  program.parse()\n}\n\nmain()\n","import { existsSync, promises as fs } from 'fs'\nimport path from 'path'\nimport { getConfig } from '@/src/utils/get-config'\nimport { getPackageManager } from '@/src/utils/get-package-manager'\nimport { handleError } from '@/src/utils/handle-error'\nimport { logger } from '@/src/utils/logger'\nimport {\n  fetchTree,\n  getItemTargetPath,\n  getRegistryBaseColor,\n  getRegistryIndex,\n  resolveTree,\n} from '@/src/utils/registry'\nimport {\n  downloadImageFromRegistry,\n  getComponentsFromExternalRegistry,\n} from '@/src/utils/registry/external'\nimport { transform } from '@/src/utils/transformers'\nimport chalk from 'chalk'\nimport { Command } from 'commander'\nimport { execa } from 'execa'\nimport ora from 'ora'\nimport prompts from 'prompts'\nimport * as z from 'zod'\nimport { formatComponentName } from '@/src/utils/format-code'\nimport { preFlight } from '@/src/utils/preflight'\nimport * as ERRORS from '@/src/utils/errors'\nimport { getNpxCommand } from '../utils/npm-commands'\n\nconst addOptionsSchema = z.object({\n  yes: z.boolean(),\n  overwrite: z.boolean(),\n  cwd: z.string(),\n  path: z.string().optional(),\n  name: z.string().optional(),\n  token: z.string().optional(),\n  silent: z.boolean(),\n})\n\nexport const add = new Command()\n  .name('add')\n  .alias('i')\n  .description('add a component to your project')\n  .argument('id', 'the component id to add')\n  .option('-n, --name <name>', 'the filename of the component to add.')\n  .option(\n    '-t, --token <token>',\n    'unique token to authenticate for private components.'\n  )\n  .option('-y, --yes', 'skip confirmation prompt.', true)\n  .option('-o, --overwrite', 'overwrite existing files.', false)\n  .option(\n    '-c, --cwd <cwd>',\n    'the working directory. defaults to the current directory.',\n    process.cwd()\n  )\n  .option('-p, --path <path>', 'the path to add the component to.')\n  .option('-s, --silent', 'silence output.', false)\n  .action(async (id, opts) => {\n    await runAdd(id, opts)\n  })\n\nexport async function runAdd(\n  id: string,\n  opts: z.infer<typeof addOptionsSchema>\n) {\n  try {\n    const options = addOptionsSchema.parse({\n      id,\n      ...opts,\n    })\n\n    const cwd = path.resolve(options.cwd)\n    const packageManager = await getPackageManager(cwd)\n\n    const error = await preFlight(cwd)\n\n    if (error === ERRORS.MISSING_DIR) {\n      logger.error(\n        `The path ${cwd} does not exist. Make sure the path is correct.`\n      )\n      process.exit(1)\n    }\n\n    // Check for existing components.json file.\n    if (!existsSync(path.resolve(cwd, 'components.json'))) {\n      logger.info(\n        `Configuration is missing. Run the following command to create a ${chalk.green(\n          'components.json'\n        )} file.`\n      )\n      const initCommand = getNpxCommand(packageManager, 'v0@latest init')\n      logger.info('')\n      logger.info(`   ${chalk.green(initCommand)}`)\n      logger.info('')\n      logger.info(\n        `When done, run ${chalk.green('v0 add <component-id>')} to add the component to your project.`\n      )\n      logger.info('')\n      process.exit(1)\n    }\n\n    const config = await getConfig(cwd)\n    if (!config) {\n      logger.error(\n        `Failed to read project configuration. Make sure your project is a Next.js project.`\n      )\n      process.exit(1)\n    }\n\n    // Validate component against registry.\n    const [component] =\n      (await getComponentsFromExternalRegistry([id], options.token)) || []\n\n    // We assume that missing cssVariables is default to true and error if they try to use a theme with it disabled.\n    if (config.tailwind.cssVariables === false && component.themeId) {\n      logger.warn(\n        `This component is using the ${chalk.cyan(\n          component.themeId\n        )} theme, which requires ${chalk.cyan('cssVariables')} to be set to ${chalk.cyan(\n          'true'\n        )} in your ${chalk.cyan('components.json')} file. Please update your ${chalk.cyan(\n          'components.json'\n        )} file and try again.`\n      )\n      logger.info('')\n      process.exit(1)\n    }\n\n    if (!id) {\n      logger.warn('No component id provided. Exiting.')\n      process.exit(0)\n    }\n\n    let componentName = options.name\n\n    if (!componentName) {\n      const { name } = await prompts({\n        type: 'text',\n        name: 'name',\n        message: `What should we name ${chalk.cyan('the component')}?`,\n        initial: 'Component',\n        format: value => value.trim(),\n        validate: (value: string) =>\n          value.length > 128\n            ? `Name should be less than 128 characters.`\n            : true,\n      })\n\n      componentName = name\n    }\n\n    if (!componentName) {\n      logger.warn('No component name provided.')\n      process.exit(0)\n    }\n\n    // Generate a kebab-case name from the component name.\n    const kebabName = componentName\n      .replace(/([a-z0-9])([A-Z])/g, '$1-$2')\n      .toLowerCase()\n    const filename = `${kebabName}.${config.tsx ? 'tsx' : 'jsx'}`\n\n    component.name = kebabName\n    component.files[0].name = filename\n\n    // Update the component name.\n    // We can just do regex replace here since we're only updating the first export.\n    component.files[0].content = formatComponentName(\n      component.files[0].content,\n      componentName\n    )\n\n    const registryIndex = await getRegistryIndex()\n\n    const tree = await resolveTree(\n      registryIndex,\n      component.registryDependencies ?? []\n    )\n    const payload = await fetchTree(config.style, tree)\n\n    const existingPrimitives: string[] = []\n    for (const item of payload) {\n      if (item.type !== 'components:ui') {\n        continue\n      }\n\n      // Filter out existing primitives from the payload.\n      const targetDir = await getItemTargetPath(\n        config,\n        item,\n        options.path ? path.resolve(cwd, options.path) : undefined\n      )\n\n      if (!targetDir) {\n        continue\n      }\n\n      const existingComponent = item.files.filter(file =>\n        existsSync(path.resolve(targetDir, file.name))\n      )\n\n      if (existingComponent.length) {\n        existingPrimitives.push(item.name)\n      }\n    }\n\n    const filteredPayload = payload.filter(\n      item => !existingPrimitives.includes(item.name)\n    )\n\n    filteredPayload.push(component)\n\n    if (!filteredPayload.length) {\n      logger.warn('Invalid component dependencies found. Exiting.')\n      process.exit(0)\n    }\n\n    if (!options.yes) {\n      const { proceed } = await prompts({\n        type: 'confirm',\n        name: 'proceed',\n        message: `Ready to add components and dependencies. Proceed?`,\n        initial: true,\n      })\n\n      if (!proceed) {\n        process.exit(0)\n      }\n    }\n\n    const baseColor = await getRegistryBaseColor(config.tailwind.baseColor)\n    const imageDestinationDir = path.resolve(cwd, 'public')\n\n    const spinner = ora(`Adding components...`)\n    if (!options.silent) {\n      spinner.start()\n    }\n\n    for (const item of filteredPayload) {\n      spinner.text = `Adding ${\n        item.type === 'components:component' ? 'component' : item.name\n      }...`\n      let targetDir = await getItemTargetPath(\n        config,\n        item,\n        options.path ? path.resolve(cwd, options.path) : undefined\n      )\n\n      if (!targetDir) {\n        continue\n      }\n\n      // Strip the /component suffix.\n      targetDir = targetDir.replace(/\\/component$/, '')\n\n      if (!existsSync(targetDir)) {\n        await fs.mkdir(targetDir, { recursive: true })\n      }\n\n      for (const file of item.files) {\n        let filePath = path.resolve(targetDir, file.name)\n\n        // Run transformers.\n        const content = await transform({\n          filename: file.name,\n          raw: file.content,\n          config,\n          baseColor,\n        })\n\n        if (!config.tsx) {\n          filePath = filePath.replace(/\\.tsx$/, '.jsx')\n        }\n\n        await fs.writeFile(filePath, content)\n      }\n\n      // Add dependencies.\n      if (item.dependencies?.length) {\n        await execa(\n          packageManager,\n          [packageManager === 'npm' ? 'add' : 'add', ...item.dependencies],\n          {\n            cwd,\n          }\n        )\n      }\n\n      // Download images to the public directory.\n      // Assumes the public directory exists.\n      if (item.images?.length) {\n        for (const image of item.images) {\n          // Skip absolute URLs.\n          if (!image.startsWith('/')) {\n            continue\n          }\n\n          const imagePath = path.join(imageDestinationDir, path.basename(image))\n\n          if (existsSync(imagePath)) {\n            continue\n          }\n\n          await downloadImageFromRegistry(image, imagePath)\n        }\n      }\n    }\n    if (!options.silent) {\n      if (component.themeId) {\n        spinner.succeed(`Done.`)\n        logger.info('')\n        logger.info(`The component has been added to your project.`)\n        logger.info(\n          `To install theme colors and fonts, visit ${chalk.cyan(\n            `https://v0.dev/t/${id}`\n          )} and follow the instructions under the Code tab.`\n        )\n        logger.info('')\n      } else {\n        spinner.succeed(`Done.`)\n      }\n    }\n  } catch (error) {\n    console.log({ error })\n    handleError(error)\n  }\n}\n","import path from 'path'\nimport { resolveImport } from '@/src/utils/resolve-import'\nimport { cosmiconfig } from 'cosmiconfig'\nimport { loadConfig } from 'tsconfig-paths'\nimport * as z from 'zod'\n\n// TODO: Figure out if we want to support all cosmiconfig formats.\n// A simple components.json file would be nice.\nconst explorer = cosmiconfig('components', {\n  searchPlaces: ['components.json'],\n})\n\nexport const rawConfigSchema = z\n  .object({\n    $schema: z.string().optional(),\n    style: z.string(),\n    rsc: z.coerce.boolean().default(false),\n    tsx: z.coerce.boolean().default(true),\n    tailwind: z.object({\n      config: z.string(),\n      css: z.string(),\n      baseColor: z.string(),\n      cssVariables: z.boolean().default(true),\n    }),\n    aliases: z.object({\n      components: z.string(),\n      utils: z.string(),\n    }),\n  })\n  .strict()\n\nexport type RawConfig = z.infer<typeof rawConfigSchema>\n\nexport const configSchema = rawConfigSchema.extend({\n  resolvedPaths: z.object({\n    tailwindConfig: z.string(),\n    tailwindCss: z.string(),\n    utils: z.string(),\n    components: z.string(),\n  }),\n})\n\nexport type Config = z.infer<typeof configSchema>\n\nexport async function getConfig(cwd: string) {\n  const config = await getRawConfig(cwd)\n\n  if (!config) return null\n\n  return await resolveConfigPaths(cwd, config)\n}\n\nexport async function resolveConfigPaths(cwd: string, config: RawConfig) {\n  // Read tsconfig.json.\n  const tsConfig = await loadConfig(cwd)\n\n  if (tsConfig.resultType === 'failed') {\n    throw new Error(\n      `Failed to load tsconfig.json. ${tsConfig.message ?? ''}`.trim()\n    )\n  }\n\n  return configSchema.parse({\n    ...config,\n    resolvedPaths: {\n      tailwindConfig: path.resolve(cwd, config.tailwind.config),\n      tailwindCss: path.resolve(cwd, config.tailwind.css),\n      utils: await resolveImport(config.aliases['utils'], tsConfig),\n      components: await resolveImport(config.aliases['components'], tsConfig),\n    },\n  })\n}\n\nexport async function getRawConfig(cwd: string): Promise<RawConfig | null> {\n  try {\n    const configResult = await explorer.search(cwd)\n\n    if (!configResult) return null\n\n    return rawConfigSchema.parse(configResult.config)\n  } catch (error) {\n    throw new Error(`Invalid configuration found in ${cwd}/components.json.`)\n  }\n}\n","import { createMatchPath, type ConfigLoaderSuccessResult } from 'tsconfig-paths'\n\nexport async function resolveImport(\n  importPath: string,\n  config: Pick<ConfigLoaderSuccessResult, 'absoluteBaseUrl' | 'paths'>\n) {\n  return createMatchPath(config.absoluteBaseUrl, config.paths)(\n    importPath,\n    undefined,\n    () => true,\n    ['.ts', '.tsx']\n  )\n}\n","import { detect } from '@antfu/ni'\n\nexport async function getPackageManager(\n  targetDir: string,\n  { withFallback }: { withFallback?: boolean } = {\n    withFallback: false,\n  }\n): Promise<'yarn' | 'pnpm' | 'bun' | 'npm'> {\n  const packageManager = await detect({ programmatic: true, cwd: targetDir })\n\n  if (packageManager === 'yarn@berry') return 'yarn'\n  if (packageManager === 'pnpm@6') return 'pnpm'\n  if (packageManager === 'bun') return 'bun'\n\n  if (!withFallback) {\n    return packageManager ?? 'npm'\n  }\n\n  // Fallback to user agent if not detected.\n  const userAgent = process.env.npm_config_user_agent || ''\n\n  if (userAgent.startsWith('yarn')) {\n    return 'yarn'\n  }\n\n  if (userAgent.startsWith('pnpm')) {\n    return 'pnpm'\n  }\n\n  if (userAgent.startsWith('bun')) {\n    return 'bun'\n  }\n\n  return 'npm'\n}\n\nexport async function getPackageRunner(cwd: string) {\n  const packageManager = await getPackageManager(cwd)\n\n  if (packageManager === 'pnpm') return 'pnpm dlx'\n\n  if (packageManager === 'bun') return 'bunx'\n\n  return 'npx'\n}\n","import chalk from 'chalk'\n\nexport const logger = {\n  log(...args: unknown[]) {\n    console.log(...args)\n  },\n  error(...args: unknown[]) {\n    console.log(chalk.red(...args))\n  },\n  warn(...args: unknown[]) {\n    console.log(chalk.yellow(...args))\n  },\n  info(...args: unknown[]) {\n    console.log(chalk.cyan(...args))\n  },\n  success(...args: unknown[]) {\n    console.log(chalk.green(...args))\n  },\n  break() {\n    console.log('')\n  },\n}\n","import { logger } from '@/src/utils/logger'\n\nexport function handleError(error: unknown) {\n  if (typeof error === 'string') {\n    logger.error(error)\n    process.exit(1)\n  }\n\n  if (error instanceof Error) {\n    logger.error(error.message)\n    process.exit(1)\n  }\n\n  logger.error('Something went wrong. Please try again.')\n  process.exit(1)\n}\n","import path from 'path'\nimport { Config } from '@/src/utils/get-config'\nimport {\n  registryBaseColorSchema,\n  registryIndexSchema,\n  registryItemWithContentSchema,\n  registryWithContentSchema,\n  stylesSchema,\n} from '@/src/utils/registry/schema'\nimport { HttpsProxyAgent } from 'https-proxy-agent'\nimport fetch from 'node-fetch'\nimport * as z from 'zod'\n\nconst baseUrl = process.env.COMPONENTS_REGISTRY_URL ?? 'https://ui.shadcn.com'\nconst agent = process.env.https_proxy\n  ? new HttpsProxyAgent(process.env.https_proxy)\n  : undefined\n\nexport async function getRegistryIndex() {\n  try {\n    const [result] = await fetchRegistry(['index.json'])\n\n    return registryIndexSchema.parse(result)\n  } catch (error) {\n    throw new Error(`Failed to fetch components from registry.`)\n  }\n}\n\nexport async function getRegistryStyles() {\n  try {\n    const [result] = await fetchRegistry(['styles/index.json'])\n\n    return stylesSchema.parse(result)\n  } catch (error) {\n    throw new Error(`Failed to fetch styles from registry.`)\n  }\n}\n\nexport async function getRegistryBaseColors() {\n  return [\n    {\n      name: 'slate',\n      label: 'Slate',\n    },\n    {\n      name: 'gray',\n      label: 'Gray',\n    },\n    {\n      name: 'zinc',\n      label: 'Zinc',\n    },\n    {\n      name: 'neutral',\n      label: 'Neutral',\n    },\n    {\n      name: 'stone',\n      label: 'Stone',\n    },\n  ]\n}\n\nexport async function getRegistryBaseColor(baseColor: string) {\n  try {\n    const [result] = await fetchRegistry([`colors/${baseColor}.json`])\n\n    return registryBaseColorSchema.parse(result)\n  } catch (error) {\n    throw new Error(`Failed to fetch base color from registry.`)\n  }\n}\n\nexport async function resolveTree(\n  index: z.infer<typeof registryIndexSchema>,\n  names: string[]\n) {\n  const tree: z.infer<typeof registryIndexSchema> = []\n\n  for (const name of names) {\n    const entry = index.find(entry => entry.name === name)\n\n    if (!entry) {\n      continue\n    }\n\n    tree.push(entry)\n\n    if (entry.registryDependencies) {\n      const dependencies = await resolveTree(index, entry.registryDependencies)\n      tree.push(...dependencies)\n    }\n  }\n\n  return tree.filter(\n    (component, index, self) =>\n      self.findIndex(c => c.name === component.name) === index\n  )\n}\n\nexport async function fetchTree(\n  style: string,\n  tree: z.infer<typeof registryIndexSchema>\n) {\n  try {\n    const paths = tree.map(item => `styles/${style}/${item.name}.json`)\n    const result = await fetchRegistry(paths)\n\n    return registryWithContentSchema.parse(result)\n  } catch (error) {\n    throw new Error(`Failed to fetch tree from registry.`)\n  }\n}\n\nexport async function getItemTargetPath(\n  config: Config,\n  item: Pick<z.infer<typeof registryItemWithContentSchema>, 'type'>,\n  override?: string\n) {\n  // Allow overrides for all items but ui.\n  if (override && item.type !== 'components:ui') {\n    return override\n  }\n\n  const [parent, type] = item.type.split(':')\n  if (!(parent in config.resolvedPaths)) return null\n\n  return path.join(\n    config.resolvedPaths[parent as keyof typeof config.resolvedPaths],\n    type\n  )\n}\n\nasync function fetchRegistry(paths: string[]) {\n  try {\n    const results = await Promise.all(\n      paths.map(async path => {\n        const response = await fetch(`${baseUrl}/registry/${path}`, {\n          agent,\n        })\n        return await response.json()\n      })\n    )\n\n    return results\n  } catch (error) {\n    throw new Error(`Failed to fetch registry from ${baseUrl}.`)\n  }\n}\n","import * as z from 'zod'\n\n// TODO: Extract this to a shared package.\nexport const registryItemSchema = z.object({\n  name: z.string(),\n  dependencies: z.array(z.string()).optional(),\n  registryDependencies: z.array(z.string()).optional(),\n  files: z.array(z.string()),\n  type: z.enum(['components:ui', 'components:component', 'components:example']),\n  images: z.array(z.string()).optional(),\n  themeId: z.string().optional(),\n})\n\nexport const registryIndexSchema = z.array(registryItemSchema)\n\nexport const registryItemWithContentSchema = registryItemSchema.extend({\n  files: z.array(\n    z.object({\n      name: z.string(),\n      content: z.string(),\n    })\n  ),\n})\n\nexport const registryWithContentSchema = z.array(registryItemWithContentSchema)\n\nexport const stylesSchema = z.array(\n  z.object({\n    name: z.string(),\n    label: z.string(),\n  })\n)\n\nexport const registryBaseColorSchema = z.object({\n  inlineColors: z.object({\n    light: z.record(z.string(), z.string()),\n    dark: z.record(z.string(), z.string()),\n  }),\n  cssVars: z.object({\n    light: z.record(z.string(), z.string()),\n    dark: z.record(z.string(), z.string()),\n  }),\n  inlineColorsTemplate: z.string(),\n  cssVarsTemplate: z.string(),\n})\n","import { handleError } from '@/src/utils/handle-error'\nimport { registryWithContentSchema } from '@/src/utils/registry/schema'\nimport { HttpsProxyAgent } from 'https-proxy-agent'\nimport fetch from 'node-fetch'\nimport { createWriteStream } from 'fs'\n\nconst baseUrl = process.env.EXTERNAL_REGISTRY_URL ?? 'https://v0.dev'\nconst agent = process.env.https_proxy\n  ? new HttpsProxyAgent(process.env.https_proxy)\n  : undefined\n\nexport async function getComponentsFromExternalRegistry(\n  ids: string[],\n  token?: string\n) {\n  try {\n    const result = await fetchExternalRegistry(ids, token)\n\n    return registryWithContentSchema.parse(result)\n  } catch (error) {\n    handleError(error)\n  }\n}\n\nasync function fetchExternalRegistry(ids: string[], token?: string) {\n  try {\n    const results = await Promise.all(\n      ids.map(async id => {\n        const url = new URL(`${baseUrl}/api/r/${id}`)\n\n        if (token) {\n          url.searchParams.set('token', token)\n        }\n\n        const response = await fetch(url, {\n          agent,\n        })\n\n        if (response.status === 404) {\n          throw new Error(`Component ${id} not found.`)\n        }\n\n        if (response.status === 401) {\n          if (token) {\n            throw new Error(\n              `Token is expired or invalid. Visit https://v0.dev/t/${id} to get a new one.`\n            )\n          }\n\n          throw new Error(\n            `This is a private component. Visit https://v0.dev/t/${id} to get a CLI token.`\n          )\n        }\n\n        if (response.status === 200) return await response.json()\n\n        throw new Error(\n          `Failed to fetch component ${id}. ${response.statusText}`\n        )\n      })\n    )\n\n    return results\n  } catch (error) {\n    handleError(error)\n  }\n}\n\nexport async function downloadImageFromRegistry(\n  url: string,\n  destination: string\n) {\n  const imageUrl = new URL(`${baseUrl}${url}`)\n  const fileStream = createWriteStream(destination, { flags: 'w' })\n  const response = await fetch(imageUrl.toString())\n\n  if (!response.body) {\n    throw new Error(`Failed to download image from ${imageUrl}`)\n  }\n\n  await response.body.pipe(fileStream)\n}\n","import { promises as fs } from 'fs'\nimport { tmpdir } from 'os'\nimport path from 'path'\nimport { Config } from '@/src/utils/get-config'\nimport { registryBaseColorSchema } from '@/src/utils/registry/schema'\nimport { transformCssVars } from '@/src/utils/transformers/transform-css-vars'\nimport { transformImport } from '@/src/utils/transformers/transform-import'\nimport { transformJsx } from '@/src/utils/transformers/transform-jsx'\nimport { transformRsc } from '@/src/utils/transformers/transform-rsc'\nimport { Project, ScriptKind, type SourceFile } from 'ts-morph'\nimport * as z from 'zod'\n\nexport type TransformOpts = {\n  filename: string\n  raw: string\n  config: Config\n  baseColor?: z.infer<typeof registryBaseColorSchema>\n}\n\nexport type Transformer<Output = SourceFile> = (\n  opts: TransformOpts & {\n    sourceFile: SourceFile\n  }\n) => Promise<Output>\n\nconst project = new Project({\n  compilerOptions: {},\n})\n\nasync function createTempSourceFile(filename: string) {\n  const dir = await fs.mkdtemp(path.join(tmpdir(), 'shadcn-'))\n  return path.join(dir, filename)\n}\n\nexport async function transform(\n  opts: TransformOpts,\n  transformers: Transformer[] = [\n    transformImport,\n    transformRsc,\n    transformCssVars,\n  ]\n) {\n  const tempFile = await createTempSourceFile(opts.filename)\n  const sourceFile = project.createSourceFile(tempFile, opts.raw, {\n    scriptKind: ScriptKind.TSX,\n  })\n\n  for (const transformer of transformers) {\n    transformer({ sourceFile, ...opts })\n  }\n\n  return await transformJsx({\n    sourceFile,\n    ...opts,\n  })\n}\n","import { registryBaseColorSchema } from '@/src/utils/registry/schema'\nimport { Transformer } from '@/src/utils/transformers'\nimport { SyntaxKind } from 'ts-morph'\nimport * as z from 'zod'\n\nexport const transformCssVars: Transformer = async ({\n  sourceFile,\n  config,\n  baseColor,\n}) => {\n  // No transform if using css variables.\n  if (config.tailwind?.cssVariables || !baseColor?.inlineColors) {\n    return sourceFile\n  }\n\n  sourceFile.getDescendantsOfKind(SyntaxKind.StringLiteral).forEach(node => {\n    const value = node.getText()\n\n    const attr = node\n      .getPreviousSiblings()\n      .find(node => {\n        return node.getKind() === SyntaxKind.Identifier\n      })\n      ?.getText()\n\n    // Only transform css vars within the className identifier.\n    if (\n      node.getParent()?.getKind() === SyntaxKind.JsxAttribute &&\n      attr &&\n      attr !== 'className'\n    ) {\n      return\n    }\n\n    if (value) {\n      const valueWithColorMapping = applyColorMapping(\n        value.replace(/\"/g, '').replace(/'/g, ''),\n        baseColor.inlineColors\n      )\n      node.replaceWithText(`\"${valueWithColorMapping.trim()}\"`)\n    }\n  })\n\n  return sourceFile\n}\n\n// Splits a className into variant-name-alpha.\n// eg. hover:bg-primary-100 -> [hover, bg-primary, 100]\nexport function splitClassName(className: string): (string | null)[] {\n  if (!className.includes('/') && !className.includes(':')) {\n    return [null, className, null]\n  }\n\n  const parts: (string | null)[] = []\n  // First we split to find the alpha.\n  let [rest, alpha] = className.split('/')\n\n  // Check if rest has a colon.\n  if (!rest.includes(':')) return [null, rest, alpha]\n\n  // Next we split the rest by the colon.\n  const split = rest.split(':')\n\n  // We take the last item from the split as the name.\n  const name = split.pop()\n\n  // We glue back the rest of the split.\n  const variant = split.join(':')\n\n  // Finally we push the variant, name and alpha.\n  parts.push(variant ?? null, name ?? null, alpha ?? null)\n\n  return parts\n}\n\nconst PREFIXES = [\n  'bg-',\n  'text-',\n  'border-',\n  'ring-offset-',\n  'ring-',\n  'fill-',\n  'stroke-',\n]\n\nexport function applyColorMapping(\n  input: string,\n  mapping: z.infer<typeof registryBaseColorSchema>['inlineColors']\n) {\n  // Handle border classes.\n  if (input.includes(' border ')) {\n    input = input.replace(' border ', ' border border-border ')\n  }\n\n  // Build color mappings.\n  const classNames = input.split(' ')\n  const lightMode = new Set<string>()\n  const darkMode = new Set<string>()\n  for (let className of classNames) {\n    const [variant, value, modifier] = splitClassName(className)\n    const prefix = PREFIXES.find(prefix => value?.startsWith(prefix))\n    if (!prefix) {\n      if (!lightMode.has(className)) {\n        lightMode.add(className)\n      }\n      continue\n    }\n\n    const needle = value?.replace(prefix, '')\n    if (needle && needle in mapping.light) {\n      lightMode.add(\n        [variant, `${prefix}${mapping.light[needle]}`]\n          .filter(Boolean)\n          .join(':') + (modifier ? `/${modifier}` : '')\n      )\n\n      darkMode.add(\n        ['dark', variant, `${prefix}${mapping.dark[needle]}`]\n          .filter(Boolean)\n          .join(':') + (modifier ? `/${modifier}` : '')\n      )\n      continue\n    }\n\n    if (!lightMode.has(className)) {\n      lightMode.add(className)\n    }\n  }\n\n  return [...Array.from(lightMode), ...Array.from(darkMode)].join(' ').trim()\n}\n","import { Transformer } from '@/src/utils/transformers'\n\nexport const transformImport: Transformer = async ({ sourceFile, config }) => {\n  const importDeclarations = sourceFile.getImportDeclarations()\n\n  for (const importDeclaration of importDeclarations) {\n    const moduleSpecifier = importDeclaration.getModuleSpecifierValue()\n\n    // Replace @/registry/[style] with the components alias.\n    if (moduleSpecifier.startsWith('@/components/')) {\n      importDeclaration.setModuleSpecifier(\n        moduleSpecifier.replace(/^@\\/components/, config.aliases.components)\n      )\n    }\n\n    // Replace @/registry/[style] with the components alias.\n    if (moduleSpecifier.startsWith('@/registry/')) {\n      importDeclaration.setModuleSpecifier(\n        moduleSpecifier.replace(\n          /^@\\/registry\\/[^/]+/,\n          config.aliases.components\n        )\n      )\n    }\n\n    // Replace `import { cn } from \"@/lib/utils\"`\n    if (moduleSpecifier == '@/lib/utils') {\n      const namedImports = importDeclaration.getNamedImports()\n      const cnImport = namedImports.find(i => i.getName() === 'cn')\n      if (cnImport) {\n        importDeclaration.setModuleSpecifier(\n          moduleSpecifier.replace(/^@\\/lib\\/utils/, config.aliases.utils)\n        )\n      }\n    }\n  }\n\n  return sourceFile\n}\n","import { type Transformer } from '@/src/utils/transformers'\nimport { transformFromAstSync } from '@babel/core'\nimport { ParserOptions, parse } from '@babel/parser'\n// @ts-ignore\nimport transformTypescript from '@babel/plugin-transform-typescript'\nimport * as recast from 'recast'\n\n// TODO.\n// I'm using recast for the AST here.\n// Figure out if ts-morph AST is compatible with Babel.\n\n// This is a copy of the babel options from recast/parser.\n// The goal here is to tolerate as much syntax as possible.\n// We want to be able to parse any valid tsx code.\n// See https://github.com/benjamn/recast/blob/master/parsers/_babel_options.ts.\nconst PARSE_OPTIONS: ParserOptions = {\n  sourceType: 'module',\n  allowImportExportEverywhere: true,\n  allowReturnOutsideFunction: true,\n  startLine: 1,\n  tokens: true,\n  plugins: [\n    'asyncGenerators',\n    'bigInt',\n    'classPrivateMethods',\n    'classPrivateProperties',\n    'classProperties',\n    'classStaticBlock',\n    'decimal',\n    'decorators-legacy',\n    'doExpressions',\n    'dynamicImport',\n    'exportDefaultFrom',\n    'exportNamespaceFrom',\n    'functionBind',\n    'functionSent',\n    'importAssertions',\n    'importMeta',\n    'nullishCoalescingOperator',\n    'numericSeparator',\n    'objectRestSpread',\n    'optionalCatchBinding',\n    'optionalChaining',\n    [\n      'pipelineOperator',\n      {\n        proposal: 'minimal',\n      },\n    ],\n    [\n      'recordAndTuple',\n      {\n        syntaxType: 'hash',\n      },\n    ],\n    'throwExpressions',\n    'topLevelAwait',\n    'v8intrinsic',\n    'typescript',\n    'jsx',\n  ],\n}\n\nexport const transformJsx: Transformer<string> = async ({\n  sourceFile,\n  config,\n}) => {\n  const output = sourceFile.getFullText()\n\n  if (config.tsx) return output\n\n  const ast = recast.parse(output, {\n    parser: {\n      parse: (code: string) => {\n        return parse(code, PARSE_OPTIONS)\n      },\n    },\n  })\n\n  const result = transformFromAstSync(ast, output, {\n    cloneInputAst: false,\n    code: false,\n    ast: true,\n    plugins: [transformTypescript],\n    configFile: false,\n  })\n\n  if (!result || !result.ast) {\n    throw new Error('Failed to transform JSX')\n  }\n\n  return recast.print(result.ast).code\n}\n","import { Transformer } from '@/src/utils/transformers'\nimport { SyntaxKind } from 'ts-morph'\n\nexport const transformRsc: Transformer = async ({ sourceFile, config }) => {\n  if (config.rsc) return sourceFile\n\n  // Remove \"use client\" from the top of the file.\n  const first = sourceFile.getFirstChildByKind(SyntaxKind.ExpressionStatement)\n  if (first?.getText() === `\"use client\"`) {\n    first.remove()\n  }\n\n  return sourceFile\n}\n","export function formatComponentName(code: string, name: string) {\n  return code.replace(\n    /export default function Component/g,\n    `export function ${name}`\n  )\n}\n","import path from 'path'\nimport fs from 'fs-extra'\nimport * as ERRORS from '@/src/utils/errors'\n\nexport async function preFlight(cwd: string) {\n  if (!fs.existsSync(cwd)) {\n    return ERRORS.MISSING_DIR\n  }\n\n  // Check for existing components.json file.\n  if (fs.existsSync(path.resolve(cwd, 'components.json'))) {\n    return ERRORS.EXISTING_CONFIG\n  }\n\n  // Check for empty project. We assume if no package.json exists, the project is empty.\n  if (!fs.existsSync(path.resolve(cwd, 'package.json'))) {\n    return ERRORS.EMPTY_PROJECT\n  }\n\n  // Check if the project is a Next.js project.\n  if (\n    !fs.existsSync(path.resolve(cwd, 'next.config.js')) &&\n    !fs.existsSync(path.resolve(cwd, 'next.config.ts')) &&\n    !fs.existsSync(path.resolve(cwd, 'next.config.mjs'))\n  ) {\n    return ERRORS.NON_NEXT_PROJECT\n  }\n\n  // We need Tailwind CSS to be configured.\n  if (\n    !fs.existsSync(path.resolve(cwd, 'tailwind.config.js')) &&\n    !fs.existsSync(path.resolve(cwd, 'tailwind.config.ts'))\n  ) {\n    return ERRORS.TAILWIND_CONFIG_MISSING\n  }\n\n  return null\n}\n","export const MISSING_DIR = '0'\nexport const EXISTING_CONFIG = '2'\nexport const EMPTY_PROJECT = '3'\nexport const NON_NEXT_PROJECT = '4'\nexport const TAILWIND_CONFIG_MISSING = '5'\n","export function getCreateNextAppCommand(packageManager: string) {\n  switch (packageManager) {\n    case 'npm':\n      return `npx create-next-app`\n    case 'yarn':\n      return `npx create-next-app`\n    default:\n      return `${packageManager} create next-app`\n  }\n}\n\nexport function getNpxCommand(packageManager: string, command: string) {\n  switch (packageManager) {\n    case 'pnpm':\n      return `pnpm dlx ${command}`\n    case 'bun':\n      return `bunx --bun ${command}`\n    default:\n      return `npx ${command}`\n  }\n}\n\nexport function getPackageRunner(packageManager: string) {\n  switch (packageManager) {\n    case 'pnpm':\n      return `pnpm dlx`\n    case 'bun':\n      return `bunx --bun`\n    default:\n      return `npx`\n  }\n}\n","import { existsSync } from 'fs'\nimport path from 'path'\nimport fs, { pathExists } from 'fs-extra'\n\nexport async function getProjectConfig(targetDir: string) {\n  const projectInfo = await getProjectInfo(targetDir)\n\n  if (!projectInfo) return null\n\n  const prefix = projectInfo.srcDir ? 'src/' : ''\n\n  return {\n    $schema: 'https://ui.shadcn.com/schema.json',\n    style: 'default',\n    rsc: projectInfo.appDir,\n    tsx: projectInfo.tsx,\n    tailwind: {\n      config: projectInfo.tailwindConfig,\n      css: projectInfo.appDir\n        ? `${prefix}app/globals.css`\n        : `${prefix}styles/globals.css`,\n      // See https://ui.shadcn.com/docs/components-json#tailwindbasecolor.\n      baseColor: 'gray',\n      cssVariables: true,\n    },\n    aliases: {\n      utils: `${projectInfo.pathPrefix}/lib/utils`,\n      components: `${projectInfo.pathPrefix}/components`,\n    },\n  }\n}\n\nexport async function getProjectInfo(targetDir: string) {\n  // We'll only handle next.js projects for now.\n  const isNext =\n    existsSync(path.resolve(targetDir, 'next.config.js')) ||\n    existsSync(path.resolve(targetDir, 'next.config.ts')) ||\n    existsSync(path.resolve(targetDir, 'next.config.mjs'))\n\n  if (!isNext) return null\n\n  // We assume a TypeScript project.\n  const tsconfig = await getTsConfig(targetDir)\n  if (!tsconfig) return null\n\n  // Check if using the src dir.\n  const srcDir = existsSync(path.resolve(targetDir, 'src'))\n\n  // Check if using app dir.\n  const appDir = existsSync(path.resolve(targetDir, srcDir ? 'src/app' : 'app'))\n\n  const paths = tsconfig.compilerOptions?.paths\n\n  // Extract the prefix from the paths.\n  const pathPrefix = Object.keys(paths)\n    .find(key => key.endsWith('/*'))\n    ?.slice(0, -2)\n\n  return {\n    srcDir,\n    appDir,\n    pathPrefix,\n    tsx: await isTypeScriptProject(targetDir),\n    tailwindConfig: existsSync(path.resolve(targetDir, 'tailwind.config.ts'))\n      ? 'tailwind.config.ts'\n      : 'tailwind.config.js',\n  }\n}\n\nexport async function isTypeScriptProject(targetDir: string) {\n  return await pathExists(path.resolve(targetDir, 'tsconfig.json'))\n}\n\nexport async function getTsConfig(targetDir: string) {\n  try {\n    const isTsx = await isTypeScriptProject(targetDir)\n\n    if (isTsx) {\n      const tsconfigPath = path.resolve(targetDir, 'tsconfig.json')\n      const tsconfig = await fs.readJSON(tsconfigPath)\n\n      if (!tsconfig) {\n        throw new Error('tsconfig.json is missing')\n      }\n\n      return tsconfig\n    }\n\n    // Try jsconfig.json.\n    const jsconfigPath = path.resolve(targetDir, 'jsconfig.json')\n    if (jsconfigPath) {\n      const jsconfig = await fs.readJSON(jsconfigPath)\n\n      if (!jsconfig) {\n        throw new Error('jsconfig.json is missing')\n      }\n\n      return jsconfig\n    }\n  } catch (error) {\n    return null\n  }\n}\n","export const UTILS = `import { type ClassValue, clsx } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n`\n\nexport const UTILS_JS = `import { clsx } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs) {\n  return twMerge(clsx(inputs))\n}\n`\n\nexport const TAILWIND_CONFIG = `/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  darkMode: [\"class\"],\n  content: [\n    './pages/**/*.{<%- extension %>,<%- extension %>x}',\n    './components/**/*.{<%- extension %>,<%- extension %>x}',\n    './app/**/*.{<%- extension %>,<%- extension %>x}',\n    './src/**/*.{<%- extension %>,<%- extension %>x}',\n\t],\n  theme: {\n    container: {\n      center: true,\n      padding: \"2rem\",\n      screens: {\n        \"2xl\": \"1400px\",\n      },\n    },\n    extend: {\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: 0 },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: 0 },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\")],\n}`\n\nexport const TAILWIND_CONFIG_WITH_VARIABLES = `/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  darkMode: [\"class\"],\n  content: [\n    './pages/**/*.{<%- extension %>,<%- extension %>x}',\n    './components/**/*.{<%- extension %>,<%- extension %>x}',\n    './app/**/*.{<%- extension %>,<%- extension %>x}',\n    './src/**/*.{<%- extension %>,<%- extension %>x}',\n\t],\n  theme: {\n    container: {\n      center: true,\n      padding: \"2rem\",\n      screens: {\n        \"2xl\": \"1400px\",\n      },\n    },\n    extend: {\n      colors: {\n        border: \"hsl(var(--border))\",\n        input: \"hsl(var(--input))\",\n        ring: \"hsl(var(--ring))\",\n        background: \"hsl(var(--background))\",\n        foreground: \"hsl(var(--foreground))\",\n        primary: {\n          DEFAULT: \"hsl(var(--primary))\",\n          foreground: \"hsl(var(--primary-foreground))\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary))\",\n          foreground: \"hsl(var(--secondary-foreground))\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive))\",\n          foreground: \"hsl(var(--destructive-foreground))\",\n        },\n        warning: {\n          DEFAULT: 'hsl(var(--warning))',\n          foreground: 'hsl(var(--warning-foreground))'\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted))\",\n          foreground: \"hsl(var(--muted-foreground))\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent))\",\n          foreground: \"hsl(var(--accent-foreground))\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover))\",\n          foreground: \"hsl(var(--popover-foreground))\",\n        },\n        card: {\n          DEFAULT: \"hsl(var(--card))\",\n          foreground: \"hsl(var(--card-foreground))\",\n        },\n      },\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: 0 },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: 0 },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\")],\n}`\n","import { Transformer } from '@/src/utils/transformers'\nimport { SyntaxKind } from 'ts-morph'\n\nconst DEFAULT_TAILWIND_CSS_VARIABLE_CONFIG = {\n  colors: {\n    border: \"hsl(var(--border))\",\n    input: \"hsl(var(--input))\",\n    ring: \"hsl(var(--ring))\",\n    background: \"hsl(var(--background))\",\n    foreground: \"hsl(var(--foreground))\",\n    primary: {\n      DEFAULT: \"hsl(var(--primary))\",\n      foreground: \"hsl(var(--primary-foreground))\",\n    },\n    secondary: {\n      DEFAULT: \"hsl(var(--secondary))\",\n      foreground: \"hsl(var(--secondary-foreground))\",\n    },\n    destructive: {\n      DEFAULT: \"hsl(var(--destructive))\",\n      foreground: \"hsl(var(--destructive-foreground))\",\n    },\n    muted: {\n      DEFAULT: \"hsl(var(--muted))\",\n      foreground: \"hsl(var(--muted-foreground))\",\n    },\n    accent: {\n      DEFAULT: \"hsl(var(--accent))\",\n      foreground: \"hsl(var(--accent-foreground))\",\n    },\n    popover: {\n      DEFAULT: \"hsl(var(--popover))\",\n      foreground: \"hsl(var(--popover-foreground))\",\n    },\n    card: {\n      DEFAULT: \"hsl(var(--card))\",\n      foreground: \"hsl(var(--card-foreground))\",\n    },\n  },\n  borderRadius: {\n    lg: \"var(--radius)\",\n    md: \"calc(var(--radius) - 2px)\",\n    sm: \"calc(var(--radius) - 4px)\",\n  },\n  keyframes: {\n    \"accordion-down\": {\n      from: { height: \"0\" },\n      to: { height: \"var(--radix-accordion-content-height)\" },\n    },\n    \"accordion-up\": {\n      from: { height: \"var(--radix-accordion-content-height)\" },\n      to: { height: \"0\" },\n    },\n  },\n}\n\n/**\n * \n * @throws property-exists\n */\nexport const transformTailwindConfig: Transformer = async ({\n  sourceFile,\n  config,\n}) => {\n  // Find the ObjectLiteralExpression that contains the tailwind config.\n  const tailwindConfig = sourceFile.getFirstDescendantByKind(\n    SyntaxKind.ObjectLiteralExpression\n  )\n\n  // Find the `plugins` property.\n  const pluginsProperty = tailwindConfig?.getProperty('plugins')\n  if (pluginsProperty) {\n    const pluginsArray = pluginsProperty.getFirstDescendantByKind(\n      SyntaxKind.ArrayLiteralExpression\n    )\n\n    // Append the `tailwindcss-animate` plugin.\n    pluginsArray?.addElement('require(\"tailwindcss-animate\")')\n\n  }\n\n  // Find the theme.extend property and merge colors, borderRAdius, and keyframes with the above DEFAULT_TAILWIND_CSS_VARIABLE_CONFIG\n  let themeExtendProperty = tailwindConfig?.getProperty('theme')\n\n  if (!themeExtendProperty) {\n    themeExtendProperty = tailwindConfig?.addPropertyAssignment({\n      name: 'theme',\n      initializer: '{}',\n    })\n  }\n\n  const themeExtendObject = themeExtendProperty!.getFirstDescendantByKind(\n    SyntaxKind.ObjectLiteralExpression\n  )\n\n  for (const [key, value] of Object.entries(DEFAULT_TAILWIND_CSS_VARIABLE_CONFIG)) {\n    const property = themeExtendObject?.getProperty(key)\n\n    if (!property) {\n      themeExtendObject?.addPropertyAssignment({\n        name: key,\n        initializer: JSON.stringify(value, null, 2),\n      })\n    } else {\n      throw new Error(\"property-exists\")\n    }\n  }\n\n  return sourceFile\n}\n","import { resolveConfigPaths, type Config } from '@/src/utils/get-config'\nimport { getPackageManager } from '@/src/utils/get-package-manager'\nimport { getProjectConfig } from '@/src/utils/get-project-info'\nimport { handleError } from '@/src/utils/handle-error'\nimport { logger } from '@/src/utils/logger'\nimport * as templates from '@/src/utils/templates'\nimport { transform } from '@/src/utils/transformers'\nimport { transformTailwindConfig } from '@/src/utils/transformers/transform-tailwind-config'\nimport { preFlight } from '@/src/utils/preflight'\nimport * as ERRORS from '@/src/utils/errors'\nimport chalk from 'chalk'\nimport { Command } from 'commander'\nimport { execa } from 'execa'\nimport { existsSync, promises as fs } from 'fs'\nimport ora from 'ora'\nimport path from 'path'\nimport * as z from 'zod'\nimport { getCreateNextAppCommand, getNpxCommand } from '../utils/npm-commands'\nimport { getRegistryBaseColor } from '@/src/utils/registry'\n\nexport const PROJECT_DEPENDENCIES = [\n  'tailwindcss-animate',\n  'class-variance-authority',\n  'clsx',\n  'tailwind-merge',\n]\n\nconst initOptionsSchema = z.object({\n  cwd: z.string(),\n  yes: z.boolean(),\n})\n\nexport const init = new Command()\n  .name('init')\n  .description('initialize your project and install dependencies')\n  .option('-y, --yes', 'skip confirmation prompt.', false)\n  .option(\n    '-c, --cwd <cwd>',\n    'the working directory. defaults to the current directory.',\n    process.cwd()\n  )\n  .action(async opts => {\n    await runInit(opts)\n  })\n\nexport async function runInit(opts: z.infer<typeof initOptionsSchema>) {\n  try {\n    const options = initOptionsSchema.parse(opts)\n    const cwd = path.resolve(options.cwd)\n    const packageManager = await getPackageManager(cwd, {\n      withFallback: true,\n    })\n\n    const error = await preFlight(cwd)\n\n    if (error === ERRORS.MISSING_DIR) {\n      logger.error(\n        `The path ${cwd} does not exist. Make sure the path is correct.`\n      )\n      process.exit(1)\n    }\n\n    if (error === ERRORS.EXISTING_CONFIG) {\n      logger.error(\n        `The path ${cwd} already contains a components.json file. Remove this file and try again.`\n      )\n      process.exit(1)\n    }\n\n    if (error === ERRORS.NON_NEXT_PROJECT) {\n      logger.warn(`The v0 cli only supports Next.js projects for now.`)\n      logger.warn(\n        `If you're using a different framework, you can copy and paste the generated code into your app.`\n      )\n      logger.warn('')\n      process.exit(1)\n    }\n\n    if (error === ERRORS.TAILWIND_CONFIG_MISSING) {\n      logger.warn(\n        `Tailwind CSS is not installed. Make sure to install Tailwind CSS in your project first.`\n      )\n      logger.warn(\n        `Visit https://tailwindcss.com/docs/guides/nextjs to get started.`\n      )\n      logger.warn('')\n      process.exit(1)\n    }\n\n    if (error === ERRORS.EMPTY_PROJECT) {\n      logger.error(`Looks like you're trying to initialize an empty project.`)\n      logger.error(\n        `Create a new Next.js project first and then run the init command.`\n      )\n\n      const createNextAppCommand = getCreateNextAppCommand(packageManager)\n      const initCommand = getNpxCommand(packageManager, 'v0@latest init')\n      logger.info('')\n      logger.info(` ${chalk.green(createNextAppCommand)}`)\n      logger.info(` ${chalk.green(initCommand)}`)\n      logger.info('')\n      process.exit(1)\n    }\n\n    const projectConfig = await getProjectConfig(cwd)\n\n    if (!projectConfig) {\n      logger.error(\n        `Failed to read project configuration. Make sure your project is a Next.js project.`\n      )\n      process.exit(1)\n    }\n\n    const config: Config = await resolveConfigPaths(cwd, projectConfig)\n\n    // Write to file.\n    logger.info('')\n    let spinner = ora(`Writing components.json...`).start()\n    const targetPath = path.resolve(cwd, 'components.json')\n    await fs.writeFile(\n      targetPath,\n      JSON.stringify(projectConfig, null, 2),\n      'utf8'\n    )\n    spinner.succeed()\n\n    spinner = ora(`Initializing project...`).start()\n\n    // Ensure all resolved paths directories exist.\n    for (const [key, resolvedPath] of Object.entries(config.resolvedPaths)) {\n      // Determine if the path is a file or directory.\n      // TODO: is there a better way to do this?\n      let dirname = path.extname(resolvedPath)\n        ? path.dirname(resolvedPath)\n        : resolvedPath\n\n      // If the utils alias is set to something like \"@/lib/utils\",\n      // assume this is a file and remove the \"utils\" file name.\n      // TODO: In future releases we should add support for individual utils.\n      if (key === 'utils' && resolvedPath.endsWith('/utils')) {\n        // Remove /utils at the end.\n        dirname = dirname.replace(/\\/utils$/, '')\n      }\n\n      if (!existsSync(dirname)) {\n        await fs.mkdir(dirname, { recursive: true })\n      }\n    }\n\n    const extension = config.tsx ? 'ts' : 'js'\n\n    // Read tailwind config.\n    const tailwindConfig = await fs.readFile(\n      config.resolvedPaths.tailwindConfig,\n      'utf8'\n    )\n\n    let updatedTailwindConfig: string\n\n    try {\n      updatedTailwindConfig = await transform(\n        {\n          filename: config.resolvedPaths.tailwindConfig,\n          raw: tailwindConfig,\n          config,\n        },\n        [transformTailwindConfig]\n      )\n    } catch (e) {\n      if (e instanceof Error && e.message === 'property-exists') {\n        logger.error(\n          `v0 now requires tailwind modifications it was unable to perform automatically.\\nPlease re-run the \\`v0 init\\` command to reset your tailwind configuration.`\n        )\n        process.exit(1)\n      } else {\n        throw e\n      }\n    }\n\n    // Write tailwind config.\n    await fs.writeFile(\n      config.resolvedPaths.tailwindConfig,\n      updatedTailwindConfig,\n      'utf8'\n    )\n\n    // Write css file.\n    const baseColor = await getRegistryBaseColor(config.tailwind.baseColor)\n    if (baseColor) {\n      await fs.writeFile(\n        config.resolvedPaths.tailwindCss,\n        config.tailwind.cssVariables\n          ? baseColor.cssVarsTemplate\n          : baseColor.inlineColorsTemplate,\n        'utf8'\n      )\n    }\n\n    // Write cn file.\n    await fs.writeFile(\n      `${config.resolvedPaths.utils}.${extension}`,\n      extension === 'ts' ? templates.UTILS : templates.UTILS_JS,\n      'utf8'\n    )\n\n    spinner.succeed()\n\n    // Install dependencies.\n    const dependenciesSpinner = ora(`Installing dependencies...`).start()\n\n    // TODO: add support for other icon libraries.\n    const deps = [\n      ...PROJECT_DEPENDENCIES,\n      // v0 uses default style for generation and new-york uses radix icons.\n      // The icons vector however uses lucide.\n      // We need to install both.\n      '@radix-ui/react-icons',\n      'lucide-react',\n    ]\n\n    await execa(\n      packageManager,\n      [packageManager === 'npm' ? 'install' : 'add', ...deps],\n      {\n        cwd,\n      }\n    )\n    dependenciesSpinner.succeed()\n\n    logger.info('')\n    logger.info(\n      `${chalk.green(\n        'Success!'\n      )} Project initialization completed. You can now starting adding components.`\n    )\n    logger.info('')\n  } catch (error) {\n    handleError(error)\n  }\n}\n","import { resolveConfigPaths, type Config } from '@/src/utils/get-config'\nimport { getPackageManager } from '@/src/utils/get-package-manager'\nimport { getProjectConfig } from '@/src/utils/get-project-info'\nimport { handleError } from '@/src/utils/handle-error'\nimport { logger } from '@/src/utils/logger'\nimport * as templates from '@/src/utils/templates'\nimport { transform } from '@/src/utils/transformers'\nimport { transformTailwindConfig } from '@/src/utils/transformers/transform-tailwind-config'\nimport { preFlight } from '@/src/utils/preflight'\nimport * as ERRORS from '@/src/utils/errors'\nimport chalk from 'chalk'\nimport { Command } from 'commander'\nimport { execa } from 'execa'\nimport { existsSync, promises as fs } from 'fs'\nimport ora from 'ora'\nimport path from 'path'\nimport * as z from 'zod'\nimport { getCreateNextAppCommand, getNpxCommand } from '../utils/npm-commands'\nimport { createProject } from '../utils/create-project'\nimport { getRegistryBaseColor } from '../utils/registry'\nimport { runAdd } from './add'\nimport { PROJECT_DEPENDENCIES } from '@/src/commands/init'\n\nconst createOptionsSchema = z.object({\n  cwd: z.string(),\n  yes: z.boolean(),\n  token: z.string().optional(),\n})\n\nexport const create = new Command()\n  .name('create')\n  .description('(experimental) create a new Next.js project with component id')\n  .argument('id', 'the component id to add')\n  .option('-y, --yes', 'skip confirmation prompt.', false)\n  .option(\n    '-c, --cwd <cwd>',\n    'the working directory. defaults to the current directory.',\n    process.cwd()\n  )\n  .option(\n    '-t, --token <token>',\n    'unique token to authenticate for private components.'\n  )\n  .action(async (id, opts) => {\n    await runCreate(id, opts)\n  })\n\nexport async function runCreate(\n  id: string,\n  opts: z.infer<typeof createOptionsSchema>\n) {\n  try {\n    const options = createOptionsSchema.parse(opts)\n    let cwd = path.resolve(options.cwd)\n\n    const packageManager = await getPackageManager(cwd, {\n      withFallback: true,\n    })\n\n    const { projectPath } = await createProject(cwd)\n    cwd = projectPath\n    process.chdir(cwd)\n\n    const error = await preFlight(cwd)\n\n    if (error === ERRORS.MISSING_DIR) {\n      logger.error(\n        `The path ${cwd} does not exist. Make sure the path is correct.`\n      )\n      process.exit(1)\n    }\n\n    if (error === ERRORS.EXISTING_CONFIG) {\n      logger.error(\n        `The path ${cwd} already contains a components.json file. Remove this file and try again.`\n      )\n      process.exit(1)\n    }\n\n    if (error === ERRORS.NON_NEXT_PROJECT) {\n      logger.warn(`The v0 cli only supports Next.js projects for now.`)\n      logger.warn(\n        `If you're using a different framework, you can copy and paste the generated code into your app.`\n      )\n      logger.warn('')\n      process.exit(1)\n    }\n\n    if (error === ERRORS.TAILWIND_CONFIG_MISSING) {\n      logger.warn(\n        `Tailwind CSS is not installed. Make sure to install Tailwind CSS in your project first.`\n      )\n      logger.warn(\n        `Visit https://tailwindcss.com/docs/guides/nextjs to get started.`\n      )\n      logger.warn('')\n      process.exit(1)\n    }\n\n    if (error === ERRORS.EMPTY_PROJECT) {\n      logger.error(`Looks like you're trying to initialize an empty project.`)\n      logger.error(\n        `Create a new Next.js project first and then run the init command.`\n      )\n\n      const createNextAppCommand = getCreateNextAppCommand(packageManager)\n      const initCommand = getNpxCommand(packageManager, 'v0@latest init')\n      logger.info('')\n      logger.info(` ${chalk.green(createNextAppCommand)}`)\n      logger.info(` ${chalk.green(initCommand)}`)\n      logger.info('')\n      process.exit(1)\n    }\n\n    const projectConfig = await getProjectConfig(cwd)\n\n    if (!projectConfig) {\n      logger.error(\n        `Failed to read project configuration. Make sure your project is a Next.js project.`\n      )\n      process.exit(1)\n    }\n\n    const config: Config = await resolveConfigPaths(cwd, projectConfig)\n\n    // Write to file.\n    let spinner = ora(`Writing components.json...`).start()\n    const targetPath = path.resolve(cwd, 'components.json')\n    await fs.writeFile(\n      targetPath,\n      JSON.stringify(projectConfig, null, 2),\n      'utf8'\n    )\n    spinner.succeed()\n\n    spinner = ora(`Initializing project...`).start()\n\n    // Ensure all resolved paths directories exist.\n    for (const [key, resolvedPath] of Object.entries(config.resolvedPaths)) {\n      // Determine if the path is a file or directory.\n      // TODO: is there a better way to do this?\n      let dirname = path.extname(resolvedPath)\n        ? path.dirname(resolvedPath)\n        : resolvedPath\n\n      // If the utils alias is set to something like \"@/lib/utils\",\n      // assume this is a file and remove the \"utils\" file name.\n      // TODO: In future releases we should add support for individual utils.\n      if (key === 'utils' && resolvedPath.endsWith('/utils')) {\n        // Remove /utils at the end.\n        dirname = dirname.replace(/\\/utils$/, '')\n      }\n\n      if (!existsSync(dirname)) {\n        await fs.mkdir(dirname, { recursive: true })\n      }\n    }\n\n    const extension = config.tsx ? 'ts' : 'js'\n\n    // Read tailwind config.\n    const tailwindConfig = await fs.readFile(\n      config.resolvedPaths.tailwindConfig,\n      'utf8'\n    )\n\n    let updatedTailwindConfig: string\n    try {\n      updatedTailwindConfig = await transform(\n        {\n          filename: config.resolvedPaths.tailwindConfig,\n          raw: tailwindConfig,\n          config,\n        },\n        [transformTailwindConfig]\n      )\n    } catch (e) {\n      if (e instanceof Error && e.message === 'property-exists') {\n        logger.error(\n          `v0 now requires tailwind modifications it was unable to perform automatically.\\nPlease re-run the \\`v0 init\\` command to reset your tailwind configuration.`\n        )\n        process.exit(1)\n      } else {\n        throw e;\n      }\n    }\n\n    // Write tailwind config.\n    await fs.writeFile(\n      config.resolvedPaths.tailwindConfig,\n      updatedTailwindConfig,\n      'utf8'\n    )\n\n    const baseColor = await getRegistryBaseColor(config.tailwind.baseColor)\n\n    let cssFilePayload = config.tailwind.cssVariables\n      ? baseColor.cssVarsTemplate\n      : baseColor.inlineColorsTemplate\n\n    // Clean up.\n    cssFilePayload = cssFilePayload\n      .trim()\n      .split('\\n')\n      .map(line => line.trim())\n      .join('\\n')\n\n    if (baseColor) {\n      await fs.writeFile(\n        config.resolvedPaths.tailwindCss,\n        cssFilePayload,\n        'utf8'\n      )\n    }\n\n    // Write cn file.\n    await fs.writeFile(\n      `${config.resolvedPaths.utils}.${extension}`,\n      extension === 'ts' ? templates.UTILS : templates.UTILS_JS,\n      'utf8'\n    )\n\n    spinner.succeed()\n\n    // Install dependencies.\n    const dependenciesSpinner = ora(`Installing dependencies...`).start()\n\n    // TODO: add support for other icon libraries.\n    const deps = [\n      ...PROJECT_DEPENDENCIES,\n      // v0 uses default style for generation and new-york uses radix icons.\n      // The icons vector however uses lucide.\n      // We need to install both.\n      '@radix-ui/react-icons',\n      'lucide-react',\n    ]\n\n    await execa(\n      packageManager,\n      [packageManager === 'npm' ? 'install' : 'add', ...deps],\n      {\n        cwd,\n      }\n    )\n    dependenciesSpinner.succeed()\n\n    const componentSpinner = ora(`Adding components...`).start()\n    await runAdd(id, {\n      cwd,\n      yes: true,\n      overwrite: true,\n      name: 'Component',\n      silent: true,\n      token: options.token,\n    })\n    componentSpinner.succeed()\n\n    // Overwrite app/page.tsx with the new import.\n    const pagePath = path.resolve(cwd, 'app', 'page.tsx')\n    await fs.writeFile(\n      pagePath,\n      `import { Component } from '@/components/component'\\n\\nexport default function Home() {\\n  return <Component />\\n}`,\n      'utf8'\n    )\n\n    const devCommand =\n      packageManager === 'npm' ? 'npm run dev' : `${packageManager} dev`\n\n    logger.log('')\n    logger.log(chalk.green('Success! Your project is ready.'))\n    logger.log(chalk.green(\"We've also added your component and dependencies.\"))\n    logger.log('')\n    logger.log('- To start the development server:')\n    logger.log('')\n    logger.log(`    cd ${cwd}`)\n    logger.log(`    ${devCommand}`)\n    logger.log('')\n    logger.log('- To deploy your project to ▲ Vercel:')\n    logger.log('')\n    logger.log(`    cd ${cwd}`)\n    logger.log(`    vercel deploy`)\n    logger.log('')\n  } catch (error) {\n    handleError(error)\n  }\n}\n","import { execa } from 'execa'\nimport prompts from 'prompts'\nimport ora from 'ora'\nimport path from 'path'\nimport fs from 'fs-extra'\n\nimport { logger } from '@/src/utils/logger'\nimport { getPackageManager } from '@/src/utils/get-package-manager'\n\nexport async function createProject(cwd: string) {\n  const packageManager = await getPackageManager(cwd)\n\n  const { name } = await prompts({\n    type: 'text',\n    name: 'name',\n    message: `What is your project named?`,\n    initial: 'v0-app',\n    format: (value: string) => value.trim(),\n    validate: (value: string) =>\n      value.length > 128 ? `Name should be less than 128 characters.` : true,\n  })\n\n  const projectPath = `${cwd}/${name}`\n\n  if (fs.existsSync(path.resolve(cwd, name, 'package.json'))) {\n    logger.warn(``)\n    logger.warn(`A project with the name ${name} already exists.`)\n    logger.warn(`Please choose a different name and try again.`)\n    logger.warn(``)\n    process.exit(1)\n  }\n\n  logger.info(``)\n  const spinner = ora(`Creating a new v0 project...`).start()\n\n  // Note: pnpm fails here. Fallback to npx with --use-PACKAGE-MANAGER.\n  const args = [\n    '--tailwind',\n    '--eslint',\n    '--typescript',\n    '--app',\n    '--no-src-dir',\n    '--no-import-alias',\n    `--use-${packageManager}`,\n  ]\n  await execa('npx', ['create-next-app', projectPath, '--silent', ...args], {\n    cwd,\n  })\n  spinner.succeed()\n\n  return {\n    projectPath,\n    projectName: name,\n  }\n}\n"],"mappings":"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","names":["Command","existsSync","fs","path","path","createMatchPath","resolveImport","importPath","config","cosmiconfig","loadConfig","z","explorer","rawConfigSchema","configSchema","getConfig","cwd","config","getRawConfig","resolveConfigPaths","tsConfig","path","resolveImport","configResult","detect","getPackageManager","targetDir","withFallback","packageManager","userAgent","chalk","logger","args","handleError","error","logger","path","z","registryItemSchema","registryIndexSchema","registryItemWithContentSchema","registryWithContentSchema","stylesSchema","registryBaseColorSchema","HttpsProxyAgent","fetch","baseUrl","agent","getRegistryIndex","result","fetchRegistry","registryIndexSchema","getRegistryBaseColor","baseColor","result","fetchRegistry","registryBaseColorSchema","resolveTree","index","names","tree","name","entry","dependencies","component","self","c","fetchTree","style","paths","item","registryWithContentSchema","getItemTargetPath","config","override","parent","type","path","fetch","baseUrl","agent","HttpsProxyAgent","fetch","createWriteStream","baseUrl","agent","getComponentsFromExternalRegistry","ids","token","result","fetchExternalRegistry","registryWithContentSchema","error","handleError","id","url","response","downloadImageFromRegistry","destination","imageUrl","fileStream","fs","tmpdir","path","SyntaxKind","transformCssVars","sourceFile","config","baseColor","node","value","attr","valueWithColorMapping","applyColorMapping","splitClassName","className","parts","rest","alpha","split","name","variant","PREFIXES","input","mapping","classNames","lightMode","darkMode","modifier","prefix","needle","transformImport","sourceFile","config","importDeclarations","importDeclaration","moduleSpecifier","i","transformFromAstSync","parse","transformTypescript","recast","PARSE_OPTIONS","transformJsx","sourceFile","config","output","ast","code","result","SyntaxKind","transformRsc","sourceFile","config","first","Project","ScriptKind","project","createTempSourceFile","filename","dir","fs","path","tmpdir","transform","opts","transformers","transformImport","transformRsc","transformCssVars","tempFile","sourceFile","transformer","transformJsx","chalk","Command","execa","ora","prompts","z","formatComponentName","code","name","path","fs","MISSING_DIR","EXISTING_CONFIG","EMPTY_PROJECT","NON_NEXT_PROJECT","TAILWIND_CONFIG_MISSING","preFlight","cwd","fs","path","EXISTING_CONFIG","NON_NEXT_PROJECT","TAILWIND_CONFIG_MISSING","EMPTY_PROJECT","MISSING_DIR","getCreateNextAppCommand","packageManager","getNpxCommand","command","addOptionsSchema","add","Command","id","opts","runAdd","options","cwd","path","packageManager","getPackageManager","preFlight","MISSING_DIR","logger","existsSync","chalk","initCommand","getNpxCommand","config","getConfig","component","getComponentsFromExternalRegistry","componentName","name","prompts","value","kebabName","filename","formatComponentName","registryIndex","getRegistryIndex","tree","resolveTree","payload","fetchTree","existingPrimitives","item","targetDir","getItemTargetPath","file","filteredPayload","proceed","baseColor","getRegistryBaseColor","imageDestinationDir","spinner","ora","fs","filePath","content","transform","execa","image","imagePath","downloadImageFromRegistry","error","handleError","existsSync","path","fs","pathExists","getProjectConfig","targetDir","projectInfo","getProjectInfo","prefix","tsconfig","getTsConfig","srcDir","appDir","paths","pathPrefix","key","isTypeScriptProject","tsconfigPath","jsconfigPath","jsconfig","UTILS","UTILS_JS","SyntaxKind","DEFAULT_TAILWIND_CSS_VARIABLE_CONFIG","transformTailwindConfig","sourceFile","config","tailwindConfig","pluginsProperty","themeExtendProperty","themeExtendObject","key","value","chalk","Command","execa","existsSync","fs","ora","path","z","PROJECT_DEPENDENCIES","initOptionsSchema","init","Command","opts","runInit","options","cwd","path","packageManager","getPackageManager","error","preFlight","MISSING_DIR","logger","EXISTING_CONFIG","NON_NEXT_PROJECT","TAILWIND_CONFIG_MISSING","EMPTY_PROJECT","createNextAppCommand","getCreateNextAppCommand","initCommand","getNpxCommand","chalk","projectConfig","getProjectConfig","config","resolveConfigPaths","spinner","ora","targetPath","fs","key","resolvedPath","dirname","existsSync","extension","tailwindConfig","updatedTailwindConfig","transform","transformTailwindConfig","e","baseColor","getRegistryBaseColor","UTILS","UTILS_JS","dependenciesSpinner","deps","execa","handleError","chalk","Command","execa","existsSync","fs","ora","path","z","execa","prompts","ora","path","fs","createProject","cwd","packageManager","getPackageManager","name","prompts","value","projectPath","fs","path","logger","spinner","ora","args","execa","createOptionsSchema","create","Command","id","opts","runCreate","options","cwd","path","packageManager","getPackageManager","projectPath","createProject","error","preFlight","MISSING_DIR","logger","EXISTING_CONFIG","NON_NEXT_PROJECT","TAILWIND_CONFIG_MISSING","EMPTY_PROJECT","createNextAppCommand","getCreateNextAppCommand","initCommand","getNpxCommand","chalk","projectConfig","getProjectConfig","config","resolveConfigPaths","spinner","ora","targetPath","fs","key","resolvedPath","dirname","existsSync","extension","tailwindConfig","updatedTailwindConfig","transform","transformTailwindConfig","e","baseColor","getRegistryBaseColor","cssFilePayload","line","UTILS","UTILS_JS","dependenciesSpinner","deps","PROJECT_DEPENDENCIES","execa","componentSpinner","runAdd","pagePath","devCommand","handleError","main","program","Command","init","add","create"]}